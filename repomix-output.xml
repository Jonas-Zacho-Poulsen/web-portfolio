This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where comments have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.env.local.example
.env.production
.gitignore
.prettierrc
.repomix/bundles.json
jest.config.js
jest.setup.js
LICENSE
next.config.mjs
package.json
postcss.config.js
README.md
src/app/api/chat/route.ts
src/app/api/contact/route.ts
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/components/calendly.tsx
src/components/chat-new.tsx
src/components/chat.test.tsx
src/components/chat.tsx
src/components/chat/ChatContainer.tsx
src/components/chat/ChatHeader.tsx
src/components/chat/ChatInput.tsx
src/components/chat/ChatMessage.tsx
src/components/chat/ChatToggle.tsx
src/components/chat/index.ts
src/components/chat/PredefinedPrompts.tsx
src/components/chat/SuggestedQuestions.tsx
src/components/error-boundary.tsx
src/components/icons.tsx
src/components/navigation.tsx
src/components/sections/about.tsx
src/components/sections/contact.tsx
src/components/sections/hero.tsx
src/components/sections/projects.tsx
src/components/sections/skills.tsx
src/components/theme-provider.tsx
src/components/theme-switcher.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/index.ts
src/config/index.ts
src/hooks/index.ts
src/hooks/use-media-query.ts
src/hooks/useScrollPosition.ts
src/services/contact.ts
src/services/fallback-data.ts
src/services/github.ts
src/services/index.ts
src/services/llm.ts
src/services/llm/index.ts
src/services/predefinedQuestionResponses.ts
src/stores/chatStore.ts
src/types/global.d.ts
src/types/images.d.ts
src/types/index.ts
src/types/jest-dom.d.ts
src/utils/index.ts
src/utils/recaptcha.ts
tailwind.config.js
tsconfig.json
vercel.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/components/chat-new.tsx">
import { motion, AnimatePresence, useDragControls } from "framer-motion"
import { useState, useRef, useEffect } from "react"
import { create } from 'zustand'
import { chatConfig } from '@/config'
import { LLMProvider } from '@/services/llm'
import { ChatMessage, MessageType } from '@/types'
⋮----
type Message = ChatMessage;
⋮----
function findBestResponse(message: string):
⋮----
const [chatSize, setChatSize] = useState({ width: 384, height: 500 }) // Default size (w-96 = 384px)
⋮----
const scrollToBottom = () =>
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
// Call the chat API
⋮----
const handleSuggestedQuestion = async (question: string) =>
⋮----
const startResize = (e: React.PointerEvent) =>
⋮----
const handleResize = (e: React.PointerEvent) =>
⋮----
const stopResize = (e: React.PointerEvent) =>
⋮----
const startDrag = (e: React.PointerEvent) =>
⋮----
onChange=
</file>

<file path="src/components/chat/ChatContainer.tsx">
import { motion, AnimatePresence, useDragControls } from 'framer-motion';
import { useEffect, useRef, useState } from 'react';
import { useChatStore } from '@/stores/chatStore';
import { ChatHeader } from './ChatHeader';
import { ChatMessage } from './ChatMessage';
import { ChatInput } from './ChatInput';
import { SuggestedQuestions } from './SuggestedQuestions';
import { PredefinedPrompts } from './PredefinedPrompts';
⋮----
const positionChatInViewport = () =>
⋮----
const handleViewportChange = () =>
⋮----
const startResize = (e: React.PointerEvent) =>
⋮----
const handleResize = (e: React.PointerEvent) =>
⋮----
const stopResize = (e: React.PointerEvent) =>
⋮----
const startDrag = (e: React.PointerEvent) =>
⋮----
const onDragEnd = (info:
⋮----
const getButtonPosition = () =>
</file>

<file path="src/components/chat/ChatHeader.tsx">
import { motion } from 'framer-motion';
import { useChatStore } from '@/stores/chatStore';
</file>

<file path="src/components/chat/ChatInput.tsx">
import { useState, useRef, KeyboardEvent } from 'react';
import { motion } from 'framer-motion';
import { useChatStore } from '@/stores/chatStore';
⋮----
const handleSubmit = async (e?: React.FormEvent) =>
⋮----
// Just add the user message and let the store handle the AI response
⋮----
// No need to manually set loading state as the store will handle it
⋮----
const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) =>
⋮----
const handleResize = () =>
⋮----
onChange=
⋮----
disabled=
</file>

<file path="src/components/chat/ChatMessage.tsx">
import { motion } from 'framer-motion';
import { MessageType } from '@/types';
⋮----
interface ChatMessageProps {
  message: {
    id: string;
    text: string;
    sender: 'user' | 'ai';
    timestamp: Date;
    topic?: MessageType;
    type?: MessageType;
  };
}
⋮----
export const ChatMessage = (
</file>

<file path="src/components/chat/ChatToggle.tsx">
import { motion } from 'framer-motion';
import { useChatStore } from '@/stores/chatStore';
</file>

<file path="src/components/chat/PredefinedPrompts.tsx">
import { motion } from 'framer-motion';
import { useChatStore } from '@/stores/chatStore';
import { useState } from 'react';
⋮----
const handlePromptClick = (prompt: string) =>
</file>

<file path="src/components/chat/SuggestedQuestions.tsx">
import { motion } from 'framer-motion';
import { useChatStore } from '@/stores/chatStore';
⋮----
const handleQuestionClick = (question: string, topic: string) =>
</file>

<file path="src/hooks/use-media-query.ts">
import { useState, useEffect } from 'react'
⋮----
export function useMediaQuery(query: string): boolean
⋮----
const handleChange = (event: MediaQueryListEvent) =>
</file>

<file path="src/services/llm/index.ts">
export type ResponseTopic = 'experience' | 'skills' | 'projects' | 'contact' | 'default';
⋮----
export type MessageType = 'user' | 'ai';
⋮----
export interface ResponseType {
  text: string;
  topic: ResponseTopic;
}
⋮----
export const findBestResponse = (message: string): ResponseType =>
</file>

<file path="src/services/predefinedQuestionResponses.ts">
export interface PredefinedResponse {
  text: string;
  topic: 'experience' | 'skills' | 'projects' | 'contact' | 'default';
}
⋮----
export function findExactQuestionResponse(question: string): PredefinedResponse | null
</file>

<file path="src/stores/chatStore.ts">
import { create } from 'zustand';
import type { ChatMessage } from '@/types';
import { LLMProvider, findBestResponse, MessageType } from '@/services/llm';
import { findExactQuestionResponse } from '@/services/predefinedQuestionResponses';
⋮----
interface ChatState {
  messages: ChatMessage[];
  isOpen: boolean;
  isLoading: boolean;
  error: string | null;
  addMessage: (message: Omit<ChatMessage, 'id' | 'timestamp'>) => void;
  setIsOpen: (isOpen: boolean) => void;
  setIsLoading: (isLoading: boolean) => void;
  setError: (error: string | null) => void;
  clearMessages: () => void;
  findBestResponse: (message: string) => { text: string; topic: MessageType };
}
</file>

<file path=".env.local.example">
# LLM API Keys - Uncomment and add your API keys to enable the chat assistant
# Only one of these is needed for the chat to work with an LLM

# Hugging Face API (Free tier available)
# NEXT_PUBLIC_HUGGINGFACE_API_KEY=your_huggingface_api_key
# NEXT_PUBLIC_HUGGINGFACE_MODEL=mistralai/Mistral-7B-Instruct-v0.2

# OpenAI API (Requires payment)
# NEXT_PUBLIC_OPENAI_API_KEY=your_openai_api_key
# NEXT_PUBLIC_OPENAI_MODEL=gpt-3.5-turbo

# Ollama API (Free, self-hosted)
# NEXT_PUBLIC_OLLAMA_ENDPOINT=http://localhost:11434
# NEXT_PUBLIC_OLLAMA_MODEL=llama2

# If no API keys are provided, the chat will use predefined responses
</file>

<file path=".env.production">
# GitHub API
GITHUB_USERNAME=jonas-zacho-poulsen

# Site URL
NEXT_PUBLIC_SITE_URL=https://jonas-poulsen.vercel.app
</file>

<file path=".prettierrc">
{
  "semi": false,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "printWidth": 100,
  "bracketSpacing": true,
  "arrowParens": "avoid",
  "endOfLine": "auto"
}
</file>

<file path=".repomix/bundles.json">
{
  "bundles": {
    "poor_impl-565": {
      "name": "poor_impl",
      "created": "2025-05-22T14:24:11.842Z",
      "lastUsed": "2025-05-22T14:24:11.842Z",
      "tags": [],
      "files": []
    }
  }
}
</file>

<file path="jest.config.js">
const createJestConfig = nextJest({
⋮----
module.exports = createJestConfig(customJestConfig)
</file>

<file path="jest.setup.js">

</file>

<file path="LICENSE">
MIT License

Copyright (c) 2024 Jonas Zacho Poulsen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="src/app/api/chat/route.ts">
import { NextResponse } from 'next/server';
import { generateResponse, getActiveProvider } from '@/services/llm';
import { chatConfig } from '@/config';
import { findExactQuestionResponse } from '@/services/predefinedQuestionResponses';
⋮----
export async function POST(request: Request)
</file>

<file path="src/components/chat.test.tsx">
import { describe, it, expect } from '@jest/globals'
import { render as rtlRender, screen, fireEvent, waitFor, RenderResult } from '@testing-library/react'
⋮----
import { Chat } from './chat'
</file>

<file path="src/components/chat/index.ts">

</file>

<file path="src/components/error-boundary.tsx">
import { Component, ErrorInfo, ReactNode } from 'react'
⋮----
interface Props {
  children: ReactNode
}
⋮----
interface State {
  hasError: boolean
}
⋮----
export class ErrorBoundary extends Component<Props, State>
⋮----
public static getDerivedStateFromError(): State
⋮----
public componentDidCatch(error: Error, errorInfo: ErrorInfo)
⋮----
public render()
</file>

<file path="src/components/ui/index.ts">

</file>

<file path="src/config/index.ts">

</file>

<file path="src/hooks/index.ts">

</file>

<file path="src/hooks/useScrollPosition.ts">
import { useState, useEffect } from 'react';
import { throttle } from '@/utils';
⋮----
interface ScrollPosition {
  scrollY: number;
  scrollX: number;
  isScrolled: boolean;
  scrollDirection: 'up' | 'down' | 'none';
}
⋮----
export function useScrollPosition(
  threshold = 50,
  throttleTime = 100
): ScrollPosition
</file>

<file path="src/services/contact.ts">
import { ContactFormData } from '@/types';
import { isValidEmail } from '@/utils';
⋮----
export function validateContactForm(data: ContactFormData):
⋮----
export async function submitContactForm(data: ContactFormData): Promise<
</file>

<file path="src/services/fallback-data.ts">
import { Repository, SkillCategory } from '@/types';
import { techStackIcons } from '@/config';
</file>

<file path="src/services/index.ts">

</file>

<file path="src/services/llm.ts">
import { fetchWithTimeout } from '@/utils';
import { chatConfig } from '@/config';
⋮----
export type LLMProvider = 'huggingface' | 'ollama' | 'openai';
⋮----
export interface LLMResponse {
  text: string;
  provider: LLMProvider;
  success: boolean;
  error?: string;
}
⋮----
export function getActiveProvider(): LLMProvider | null
⋮----
async function generateHuggingFaceResponse(message: string): Promise<LLMResponse>
⋮----
async function generateOpenAIResponse(message: string): Promise<LLMResponse>
⋮----
async function generateOllamaResponse(message: string): Promise<LLMResponse>
⋮----
export function findBestResponse(message: string):
⋮----
export type MessageType = 'experience' | 'skills' | 'projects' | 'contact' | 'default';
⋮----
export class LLMProvider
⋮----
static async sendMessage(message: string): Promise<
⋮----
export async function generateResponse(message: string): Promise<
</file>

<file path="src/types/images.d.ts">

</file>

<file path="src/types/index.ts">
export interface Repository {
  id: number;
  name: string;
  description: string;
  html_url: string;
  topics: string[];
  stargazers_count: number;
  language: string;
  screenshots: string[];
  demo_url?: string;
  status: "completed" | "in-progress" | "planned";
  tech_stack: TechStack[];
  github_stats?: GithubStats;
}
⋮----
export interface TechStack {
  name: string;
  icon: string;
}
⋮----
export interface GithubStats {
  forks: number;
  issues: number;
  watchers: number;
}
⋮----
export interface Skill {
  name: string;
  icon: string;
  proficiency: number;
  description?: string;
}
⋮----
export interface SkillCategory {
  category: string;
  icon?: string;
  description?: string;
  items: Skill[];
}
⋮----
export interface SocialLink {
  name: string;
  value: string;
  icon: React.ComponentType;
  href: string;
}
⋮----
export interface ContactFormData {
  name: string;
  email: string;
  message: string;
}
⋮----
export type LLMProvider = 'huggingface' | 'ollama' | 'openai';
⋮----
export interface ChatMessage {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  topic?: MessageType;
  provider?: LLMProvider | 'fallback';
}
⋮----
export type MessageType = 'experience' | 'skills' | 'projects' | 'contact' | 'default';
</file>

<file path="src/types/jest-dom.d.ts">
interface Matchers<R, T> {
      toBeInTheDocument(): R;
      toBeVisible(): R;
      toHaveTextContent(text: string | RegExp): R;
      toHaveAttribute(attr: string, value?: string | RegExp): R;
      toHaveClass(className: string): R;
      toBeDisabled(): R;
      toBeEnabled(): R;
      toBeEmpty(): R;
      toBeInvalid(): R;
      toBeRequired(): R;
      toBeValid(): R;
      toContainElement(element: HTMLElement | null): R;
      toContainHTML(htmlText: string): R;
      toHaveAccessibleDescription(description?: string | RegExp): R;
      toHaveAccessibleName(name?: string | RegExp): R;
      toHaveFocus(): R;
      toHaveFormValues(values: Record<string, any>): R;
      toHaveStyle(css: string | Record<string, any>): R;
      toHaveValue(value?: string | string[] | number): R;
      toBeChecked(): R;
      toBePartiallyChecked(): R;
      toHaveDisplayValue(value: string | RegExp | (string | RegExp)[]): R;
    }
⋮----
toBeInTheDocument(): R;
toBeVisible(): R;
toHaveTextContent(text: string | RegExp): R;
toHaveAttribute(attr: string, value?: string | RegExp): R;
toHaveClass(className: string): R;
toBeDisabled(): R;
toBeEnabled(): R;
toBeEmpty(): R;
toBeInvalid(): R;
toBeRequired(): R;
toBeValid(): R;
toContainElement(element: HTMLElement | null): R;
toContainHTML(htmlText: string): R;
toHaveAccessibleDescription(description?: string | RegExp): R;
toHaveAccessibleName(name?: string | RegExp): R;
toHaveFocus(): R;
toHaveFormValues(values: Record<string, any>): R;
toHaveStyle(css: string | Record<string, any>): R;
toHaveValue(value?: string | string[] | number): R;
toBeChecked(): R;
toBePartiallyChecked(): R;
toHaveDisplayValue(value: string | RegExp | (string | RegExp)[]): R;
</file>

<file path="src/utils/index.ts">
export function formatDate(date: Date): string
⋮----
export function generateId(): string
⋮----
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void
⋮----
const later = () =>
⋮----
export function throttle<T extends (...args: any[]) => any>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void
⋮----
export function isValidEmail(email: string): boolean
⋮----
export function truncateText(text: string, maxLength: number): string
⋮----
export async function fetchWithTimeout(
  url: string,
  options: RequestInit = {},
  timeout = 8000
): Promise<Response>
</file>

<file path="src/utils/recaptcha.ts">
export async function validateRecaptcha(token: string): Promise<boolean>
</file>

<file path=".gitignore">
# clerk configuration (can include secrets)
/.clerk/

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

.vercel
</file>

<file path="postcss.config.js">

</file>

<file path="src/components/calendly.tsx">
import { useEffect } from 'react';
⋮----
const handleClick = () =>
</file>

<file path="src/components/ui/button.tsx">
import { motion, HTMLMotionProps } from "framer-motion"
import { forwardRef, ButtonHTMLAttributes } from "react"
⋮----
export interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {



  variant?: "primary" | "secondary" | "outline" | "ghost"



  size?: "sm" | "md" | "lg"



  isLoading?: boolean



  leftIcon?: React.ReactNode



  rightIcon?: React.ReactNode



  motionProps?: Omit<HTMLMotionProps<"button">, keyof ButtonHTMLAttributes<HTMLButtonElement>>
}
</file>

<file path="src/components/ui/card.tsx">
import { motion, HTMLMotionProps } from "framer-motion"
import { forwardRef, HTMLAttributes } from "react"
⋮----
export interface CardProps extends HTMLAttributes<HTMLDivElement> {



  variant?: "default" | "bordered" | "elevated"



  disableAnimations?: boolean



  motionProps?: Omit<HTMLMotionProps<"div">, keyof HTMLAttributes<HTMLDivElement>>
}
</file>

<file path="src/services/github.ts">
import { Octokit } from "@octokit/rest";
⋮----
interface Repository {
  id: number;
  name: string;
  description: string | null;
  html_url: string;
  language: string;
  created_at: string;
  updated_at: string;
  topics: string[];
  stargazers_count: number;
  fork: boolean;
}
⋮----
interface TechStackItem {
  name: string;
  icon: string;
}
⋮----
export class GitHubService
⋮----
constructor(username: string)
⋮----
async getRepositories(): Promise<Repository[]>
⋮----
async getFeaturedRepositories(): Promise<Repository[]>
⋮----
async getTechStack(): Promise<TechStackItem[]>
</file>

<file path="src/types/global.d.ts">
interface Window {
  Calendly?: {
    initInlineWidget: (options: any) => void;
    initPopupWidget: (options: any) => void;
    showPopupWidget: (url: string) => void;
    closePopupWidget: () => void;
  };
}
</file>

<file path="tailwind.config.js">

</file>

<file path="src/components/icons.tsx">
export const EmailIcon = (
⋮----
export const PhoneIcon = (
⋮----
export const GithubIcon = (
</file>

<file path="src/components/theme-provider.tsx">
import { ThemeProvider as NextThemesProvider } from "next-themes"
⋮----
export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>)
</file>

<file path="src/components/theme-switcher.tsx">
import { useTheme } from "next-themes"
import { motion } from "framer-motion"
import { useState, useEffect } from "react"
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es2020",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "types": ["jest"]
  },
  "include": [
    "next-env.d.ts",
    "src/**/*.ts",
    "src/**/*.tsx",
    ".next/types/**/*.ts",
    "src/test-utils.d.ts",
    "src/types/**/*.d.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

<file path="src/app/api/contact/route.ts">
import { NextResponse } from 'next/server'
import { Resend } from 'resend'
⋮----
async function validateRecaptcha(token: string): Promise<boolean>
⋮----
export async function POST(request: Request)
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
⋮----
@layer base {
⋮----
:root {
⋮----
.dark {
⋮----
* {
body {
⋮----
::-webkit-scrollbar {
⋮----
::-webkit-scrollbar-track {
⋮----
::-webkit-scrollbar-thumb {
⋮----
::-webkit-scrollbar-thumb:hover {
⋮----
.gradient-text {
⋮----
.animated-underline {
⋮----
.animated-underline::after {
⋮----
.animated-underline:hover::after {
⋮----
.glass {
</file>

<file path="src/components/chat.tsx">
import { useEffect, useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useDragControls } from 'framer-motion';
import { ChatContainer } from './chat/ChatContainer';
import { ChatToggle } from './chat/ChatToggle';
import { useChatStore } from '@/stores/chatStore';
import type { ChatMessage, MessageType, LLMProvider } from '@/types';
import { findExactQuestionResponse } from '@/services/predefinedQuestionResponses';
⋮----
const useChatInitialization = () =>
⋮----
export const Chat = () =>
⋮----
function findBestResponse(message: string):
⋮----
const [chatSize, setChatSize] = useState({ width: 384, height: 500 }) // Default size (w-96 = 384px)
⋮----
const scrollToBottom = () =>
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
// Call the chat API
⋮----
const handleSuggestedQuestion = async (question: string) =>
⋮----
const startResize = (e: React.PointerEvent) =>
⋮----
const handleResize = (e: React.PointerEvent) =>
⋮----
const stopResize = (e: React.PointerEvent) =>
⋮----
const startDrag = (e: React.PointerEvent) =>
⋮----
onChange=
</file>

<file path="vercel.json">
{
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/next"
    }
  ],
  "build": {
    "env": {
      "NPM_FLAGS": "--prefer-offline --no-audit --no-fund --no-optional",
      "GITHUB_USERNAME": "jonas-zacho-poulsen",
      "NEXT_PUBLIC_SITE_URL": "https://jonas-poulsen.vercel.app"
    }
  }
}
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
⋮----
// Optimize image quality and formats
⋮----
// Performance optimizations
⋮----
// Improve production builds
⋮----
// Experimental features for better performance
</file>

<file path="README.md">
# Personal Portfolio Website

[![Next.js](https://img.shields.io/badge/Next.js-14-black)](https://nextjs.org/)
[![TypeScript](https://img.shields.io/badge/TypeScript-5.3-blue)](https://www.typescriptlang.org/)
[![Tailwind CSS](https://img.shields.io/badge/Tailwind-3.4-38B2AC)](https://tailwindcss.com/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black)](https://web-portfolio-niglouvxv-jonas-zacho-poulsens-projects.vercel.app)

A modern, responsive portfolio website showcasing my projects and skills. Built with the latest web technologies and best practices.

## 🌟 Features

- ⚡ **Next.js 14** with App Router and Server Components
- 🎨 **Modern Design**
  - Responsive layout
  - Dark/Light mode with system preference sync
  - Smooth animations with Framer Motion
- 🤖 **Chat Assistant**
  - Context-aware responses
  - Predefined topics with dynamic suggestions
  - Smooth animations and typing indicators
- 🎯 **Dynamic Project Showcase**
  - GitHub integration
  - Live project status
  - Tech stack visualization
- 💻 **Technical Features**
  - TypeScript for type safety
  - Tailwind CSS for styling
  - SEO optimization
  - Performance optimized
  - Responsive images
  - Modern animations

## 🛠️ Tech Stack

- **Framework**: Next.js 14
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **Animation**: Framer Motion
- **State Management**: React Hooks
- **Version Control**: Git
- **Deployment**: Vercel
- **Package Manager**: pnpm

## 🚀 Getting Started

1. Clone the repository:
```bash
git clone https://github.com/Jonas-Zacho-Poulsen/web-portfolio.git
```

2. Install dependencies:
```bash
pnpm install
```

3. Run the development server:
```bash
pnpm dev
```

4. Open [http://localhost:3000](http://localhost:3000) in your browser.

## 🚀 Deployment

This project is deployed on Vercel. The production environment is automatically updated when changes are pushed to the `main` branch.

### Manual Deployment

1. Install Vercel CLI:
```bash
npm i -g vercel
```

2. Deploy to Vercel:
```bash
vercel
```

3. Deploy to production:
```bash
vercel --prod
```

### Environment Variables

Make sure to set up the following environment variables in your Vercel project settings:

- `NEXT_PUBLIC_SITE_URL`: Your production URL
- `NEXT_PUBLIC_GITHUB_USERNAME`: Your GitHub username
- `GITHUB_TOKEN` (optional): For higher GitHub API rate limits
- `NEXT_PUBLIC_GA_ID` (optional): Google Analytics ID
- `NEXT_PUBLIC_UMAMI_WEBSITE_ID` (optional): Umami analytics ID
- `NEXT_PUBLIC_UMAMI_URL` (optional): Umami analytics URL

## 📁 Project Structure

The project follows a well-organized, modular architecture designed for scalability and maintainability:

```
├── src/
│   ├── app/             # Next.js App Router pages and API routes
│   │   ├── api/         # API endpoints (contact form, etc.)
│   │   └── page.tsx     # Main page component
│   ├── components/      # Reusable UI components
│   │   ├── sections/    # Main page sections (Hero, About, etc.)
│   │   ├── ui/          # Shared UI components (Button, Card, etc.)
│   │   └── layout/      # Layout components (Navigation, Footer, etc.)
│   ├── config/          # Application configuration and constants
│   ├── hooks/           # Custom React hooks
│   ├── services/        # API services and data fetching
│   │   └── fallback-data.ts  # Fallback data when API requests fail
│   ├── types/           # TypeScript type definitions
│   └── utils/           # Utility functions and helpers
├── public/              # Static assets (images, fonts, etc.)
└── ...config files      # Configuration files for Next.js, TypeScript, etc.
```

### Architecture Overview

The application follows a clean, modular architecture with clear separation of concerns:

- **Presentation Layer**: Components in `src/components/` handle the UI rendering
- **Data Layer**: Services in `src/services/` handle data fetching and API interactions
- **State Management**: Uses React hooks and context for state management
- **Type System**: Comprehensive TypeScript types in `src/types/`
- **Configuration**: Centralized configuration in `src/config/`
- **Utilities**: Reusable helper functions in `src/utils/`

## 🔧 Development

### Code Quality

- **TypeScript**: Strong typing for better code quality and developer experience
- **ESLint**: Static code analysis to catch problems early
- **Prettier**: Consistent code formatting
- **Component Architecture**: Modular, reusable components with clear responsibilities

### Git Workflow

- **Feature Branches**: Development happens in feature branches
- **Pull Requests**: Code review process through pull requests
- **Conventional Commits**: Structured commit messages for better readability

### Testing (Planned)

- **Jest**: Unit testing framework
- **React Testing Library**: Component testing
- **Cypress**: End-to-end testing

### CI/CD (Planned)

- **GitHub Actions**: Automated testing and linting
- **Vercel Integration**: Automatic deployments
- **Preview Deployments**: Preview environments for pull requests

## 📱 Responsive Design

The portfolio is built with a mobile-first approach to ensure a great experience on all devices:

- **Mobile-First**: Designed for mobile devices first, then enhanced for larger screens
- **Responsive Grid**: Flexible grid system that adapts to different screen sizes
- **Fluid Typography**: Text sizes that scale based on viewport width
- **Optimized Images**: Images are optimized and properly sized for different devices
- **Touch-Friendly**: Interactive elements are designed for touch interactions
- **Media Queries**: Custom media queries for precise control over breakpoints
- **Viewport Meta Tag**: Proper viewport configuration for mobile devices
- **Testing**: Tested on multiple devices and screen sizes

## 🎨 Design System

The portfolio uses a consistent design system to ensure visual coherence:

### Colors

- **Primary**: Green (#19C37D) - Used for primary actions and key highlights
- **Secondary**: Subtle gray tones for backgrounds and secondary elements
- **Accent**: Purple and blue gradients for visual interest
- **Semantic Colors**: Success, warning, and error states
- **Dark/Light Themes**: Complete color system for both themes

### Typography

- **Font Family**: Inter, a modern sans-serif typeface
- **Type Scale**: Consistent sizing based on a modular scale
- **Font Weights**: Strategic use of weights for visual hierarchy
- **Line Heights**: Optimized for readability
- **Responsive Sizing**: Font sizes adjust based on viewport

### Spacing

- **Consistent Scale**: Based on a 4px grid (4px, 8px, 16px, 24px, etc.)
- **Component Spacing**: Consistent margins and padding
- **Responsive Adjustments**: Spacing adapts to different screen sizes

### Components

- **Button Variants**: Primary, secondary, outline, and ghost
- **Card Styles**: Various card designs for different content types
- **Form Elements**: Styled inputs, selects, and form controls
- **Navigation**: Consistent navigation patterns

### Animations

- **Transitions**: Smooth transitions between states
- **Hover Effects**: Subtle feedback on interactive elements
- **Page Transitions**: Smooth transitions between pages
- **Loading States**: Animated loading indicators

## 📫 Contact

Feel free to reach out to me through any of these channels:

- **Email**: [jonaszachopoulsen@live.dk](mailto:jonaszachopoulsen@live.dk)
- **GitHub**: [@Jonas-Zacho-Poulsen](https://github.com/Jonas-Zacho-Poulsen)
- **LinkedIn**: [j-poulsen-](https://www.linkedin.com/in/j-poulsen-/)
- **Phone**: +45 50 22 73 00

## 🔒 Security

This project follows security best practices:

- **HTTPS**: Secure communication with TLS
- **Content Security Policy**: Prevents XSS attacks
- **Input Validation**: All user inputs are validated
- **Dependency Scanning**: Regular checks for vulnerable dependencies
- **Environment Variables**: Sensitive information stored in environment variables

## 🚀 Performance

Performance optimization techniques used in this project:

- **Code Splitting**: Only load what's needed
- **Image Optimization**: Next.js image optimization
- **Lazy Loading**: Components and images load as needed
- **Caching**: Proper cache headers for static assets
- **Minification**: CSS and JavaScript are minified
- **Tree Shaking**: Unused code is removed
- **Preloading**: Critical resources are preloaded

## 📄 License

This project is open source and available under the [MIT License](LICENSE).

---

Built with ❤️ by Jonas Zacho Poulsen
</file>

<file path="src/app/page.tsx">
import { Hero } from "@/components/sections/hero"
import { About } from "@/components/sections/about"
import { Skills } from "@/components/sections/skills"
import { Projects } from "@/components/sections/projects"
import Contact from "@/components/sections/contact"
import { Chat } from "@/components/chat"
import { Navigation } from "@/components/navigation"
⋮----
export default function Home()
</file>

<file path="src/components/navigation.tsx">
import { motion, useScroll, AnimatePresence } from "framer-motion"
import { useEffect, useState } from "react"
import { ThemeSwitcher } from "./theme-switcher"
⋮----
const handleNavClick = (href: string) =>
</file>

<file path="src/app/layout.tsx">
import { ThemeProvider } from "@/components/theme-provider"
import { Inter } from "next/font/google"
⋮----
import type { Metadata } from 'next'
⋮----
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
})
</file>

<file path="src/components/sections/contact.tsx">
import { motion, AnimatePresence } from "framer-motion"
import React, { useState, useEffect, useRef } from "react"
import { EmailIcon, PhoneIcon, GithubIcon, LinkedInIcon } from "@/components/icons"
import { useForm } from "react-hook-form"
import { z } from "zod"
import { zodResolver } from "@hookform/resolvers/zod"
import ReCAPTCHA from "react-google-recaptcha"
⋮----
type FormValues = z.infer<typeof formSchema>
⋮----
// Preload Calendly script when component mounts
⋮----
const loadCalendlyScript = () =>
⋮----
// Only add the script once
⋮----
// If script already exists, mark as ready
⋮----
// Load immediately
⋮----
// Add event listener for Calendly events
const handleCalendlyEvent = (e: any) =>
⋮----
// Clean up on unmount
⋮----
// Simple toggle for Calendly modal
const toggleCalendly = () =>
⋮----
// Force reflow to ensure the previous state is cleaned up
⋮----
// Handle Calendly script loading and initialization
⋮----
// Clean up any existing iframes first
⋮----
// Create and append the iframe
⋮----
// Clear any existing content
⋮----
// Cleanup function
⋮----
// Hide success message after 5 seconds
⋮----
const onSubmit = async (data: FormValues) =>
⋮----
// Verify reCAPTCHA if we're not in development mode
⋮----
// Execute reCAPTCHA verification
⋮----
// Use existing token if available
⋮----
// Add CSRF token from cookie if available
⋮----
reset() // Reset form fields
⋮----
// Reset reCAPTCHA
⋮----

⋮----
onChange=
</file>

<file path="src/components/sections/hero.tsx">
import { motion, useScroll, useTransform } from "framer-motion"
import { useRef, useEffect, useState } from "react"
import { EmailIcon, PhoneIcon, GithubIcon, LinkedInIcon } from "@/components/icons"
⋮----
const TypedText = (
⋮----
const handleMouseMove = (e: MouseEvent) =>
</file>

<file path="src/components/sections/projects.tsx">
import { motion } from "framer-motion"
import { useEffect, useState } from "react"
import Image from "next/image"
import { GithubIcon } from "@/components/icons"
⋮----
interface Repository {
  id: number
  name: string
  description: string
  html_url: string
  topics: string[]
  stargazers_count: number
  language: string
  screenshots: string[]
  demo_url?: string
  status: "completed" | "in-progress" | "planned"
  tech_stack: {
    name: string
    icon: string
  }[]
  github_stats?: {
    forks: number
    issues: number
    watchers: number
  }
}
⋮----
onHoverEnd=
⋮----
async function fetchProjects()
</file>

<file path="package.json">
{
  "name": "portfolio-2025",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.0.1",
    "@vercel/analytics": "^1.5.0",
    "@vercel/speed-insights": "^1.2.0",
    "critters": "0.0.25",
    "framer-motion": "^10.16.4",
    "next": "^14.2.29",
    "next-themes": "^0.4.6",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-google-recaptcha": "^3.1.0",
    "react-hook-form": "^7.56.4",
    "zod": "^3.25.17",
    "zustand": "5.0.5"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^14.0.0",
    "@types/node": "^18.15.11",
    "@types/react": "^18.0.37",
    "@types/react-dom": "^18.0.11",
    "@types/react-google-recaptcha": "^2.1.9",
    "autoprefixer": "^10.4.14",
    "eslint": "^8.38.0",
    "eslint-config-next": "14.0.4",
    "postcss": "^8.4.22",
    "tailwindcss": "^3.3.1",
    "typescript": "^5.0.4"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
</file>

<file path="src/components/sections/skills.tsx">
import { motion, useInView } from "framer-motion"
import { useState, useRef, useEffect } from "react"
⋮----
interface Skill {
  name: string
  icon: string
  proficiency: number
  description?: string
}
⋮----
interface SkillCategory {
  category: string
  icon?: string
  description?: string
  items: Skill[]
}
⋮----
const SkillTooltip = (
⋮----
const handleCategoryClick = (index: number) =>
</file>

<file path="src/components/sections/about.tsx">
import { motion } from "framer-motion"
import Image from "next/image"
import { useState } from "react"
</file>

</files>
